<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>minY = y - 200; //TODO need dynamic pedal play size
var i = 0;
repeat(3){
    instancePressed[i] = false;
    i+= 1;
}
pedalPlay = ystart - minY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Listen for released action
for (var i = 0; i &lt; 3; i+=1){
    if (device_mouse_check_button_released(i, mb_left)) {
        if (instancePressed[i]){ 
            instancePressed[i] = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Listen for pressed action 
for (var i = 0; i &lt; 3; i+=1){
    if (device_mouse_check_button_pressed(i, mb_left)) {
        if (device_mouse_x(i) &gt; bbox_left &amp;&amp; device_mouse_x(i) &lt; bbox_right
            &amp;&amp; device_mouse_y(i) &lt; bbox_bottom &amp;&amp; device_mouse_y(i) &gt; bbox_top){
                instancePressed[i] = true;
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Follow touch while pressed
for (var i = 0; i &lt; 3; i+=1){
    if (instancePressed[i]){
        //If touch has moved too far left or right of pedal, disable press 
        if (device_mouse_x(i) &lt; bbox_left - sprite_width ||
            device_mouse_x(i) &gt; bbox_right + sprite_width){
            instancePressed[i] = false;
        }
        //Otherwise follow touch with pedal 
        else{
            if (device_mouse_y(i) &gt; minY &amp;&amp; device_mouse_y(i) &lt;= ystart 
                &amp;&amp; y &gt;= minY &amp;&amp; y &lt;= ystart){
                y = device_mouse_y(i);
            }else{
                if (device_mouse_y(i) &lt; minY)
                    y = minY;
                if (device_mouse_y(i) &gt; ystart)
                    y = ystart;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return pedal to start position 
var resetPedal = false;
var pedalPressed = false;
//
for (var i = 0; i &lt; 3; i+= 1){
    if (instancePressed[i])
        pedalPressed = true;
    else if (!instancePressed[i] &amp;&amp; y &lt; ystart)
        resetPedal = true;
}

if resetPedal &amp;&amp; !pedalPressed
    vspeed = 25;

if y &gt;= ystart{
    vspeed = 0;
    y = ystart;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
